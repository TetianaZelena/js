// task 1
// В функции может быть больше одного оператора return. Главное помнить, что выполнение функции прерывается когда интерпретатор встречает возврат, и весь код после него будет проигнорирован в текущем вызове функции.

// Возьмём уже знакомую нам функцию проверки совершеннолетия. Она работает, но здесь есть «лишний» код, то есть тело функции можно оптимизировать. В данном случае подойдёт приём (паттерн) «ранний возврат».

// function checkAge(age) {
//   let message;

//   if (age >= 18) {
//     message = 'Вы совершеннолетний человек';
//   } else {
//     message = 'Вы не совершеннолетний человек';
//   }

//   return message;
// }
// Если условие в if выполняется, то есть приводится к true, возвращаем строку 'Вы совершеннолетний человек' и код ниже уже не исполнится.
// Если условие в if не выполняется, то есть приводится к false, возвращаем строку 'Вы не совершеннолетний человек'.
// Используя паттерн «ранний возврат» и то, что выполнение функции прерывается на операторе return, мы избавляемся от лишней переменной и блока else. То есть этот приём помогает «разгладить» ветвления.

// Задание
// Запиши условие в инструкции if так, чтобы функция работала правильно.

// Тесты
// Объявлена функция checkAge(age).
// В выражении проверки возраста использован оператор >=.
// Вызов checkAge(20) возвращает 'Вы совершеннолетний человек'.
// Вызов checkAge(8) возвращает 'Вы не совершеннолетний человек'.
// Вызов checkAge(14) возвращает 'Вы не совершеннолетний человек'.
// Вызов checkAge(38) возвращает 'Вы совершеннолетний человек'.
// В теле функции есть только одна инструкция if.
// В теле функции нет инструкции else или else if.



function checkAge(age) {
  if (age>=18) { // Дополни эту строку
    return 'Вы совершеннолетний человек';
  }

  return 'Вы не совершеннолетний человек';
}

// task 2

// Функция checkPassword получает пароль пользователя в параметр password, проверяет его на совпадение с паролем администратора в переменной ADMIN_PASSWORD и возвращает сообщение о результате сравнения.

// Проведи рефакторинг кода функции checkStorage используя паттерн «ранний возврат»:

// удали переменную message;
// удали else;
// код должен работать так же, как и до оптимизации.
// Тесты
// Объявлена функция checkPassword(password).
// Вызов checkPassword('mangohackzor') возвращает 'Доступ запрещен, неверный пароль!'.
// Вызов checkPassword('polyhax') возвращает 'Доступ запрещен, неверный пароль!'.
// Вызов checkPassword('jqueryismyjam') возвращает 'Добро пожаловать!'.
function checkPassword(password) {
  const ADMIN_PASSWORD = 'jqueryismyjam';
  // Пиши код ниже этой строки
 

  if (password === ADMIN_PASSWORD) {
   return 'Добро пожаловать!';
  } 
   return 'Доступ запрещен, неверный пароль!';


  // Пиши код выше этой строки
}
console.log(checkPassword('mangohackzor'));
console.log(checkPassword('polyhax'));
console.log(checkPassword('jqueryismyjam'));

// task 3
// Функция checkStorage проверяет возможность оформления заказа и возвращает сообщение о результате. Она принимает два параметра, значения которых будут задаваться во время её вызова.

// available - доступное количество товаров на складе;
// ordered - количество единиц товара в заказе.
// Проведи рефакторинг кода функции checkStorage используя паттерн «ранний возврат».

// Тесты
// Объявлена функция checkStorage(available, ordered).
// Вызов checkStorage(100, 50) возвращает 'Заказ оформлен, с вами свяжется менеджер'.
// Вызов checkStorage(100, 130) возвращает 'Слишком большой заказ, на складе недостаточно товаров!'.
// Вызов checkStorage(70, 0) возвращает 'В заказе еще нет товаров'.
// Вызов checkStorage(200, 20) возвращает 'Заказ оформлен, с вами свяжется менеджер'.
// Вызов checkStorage(200, 250) возвращает 'Слишком большой заказ, на складе недостаточно товаров!'.
// Вызов checkStorage(150, 0) возвращает 'В заказе еще нет товаров'.
function checkStorage(available, ordered) {
  // Пиши код ниже этой строки
 

  if (ordered === 0) {
   return'В заказе еще нет товаров';
    }
    if (ordered > available) {
   return 'Слишком большой заказ, на складе недостаточно товаров!';
  } 
    return 'Заказ оформлен, с вами свяжется менеджер';
 

  // Пиши код выше этой строки
}

consol.log(checkStorage(100, 50));
consol.log(checkStorage(100, 50));
consol.log(checkStorage(100, 50));
consol.log(checkStorage(100, 50));
consol.log(checkStorage(100, 50));
consol.log(checkStorage(100, 50));
 
// task 6
// В отличии от строк, элементы массива можно изменять обратившись к ним по индексу и присвоив другое значение.

// const numbers = [1, 2, 3, 4, 5];
// numbers[0] = 7;
// numbers[2] = 14;
// console.log(numbers); // [7, 2, 14, 4, 5];
// Задание
// Переопредели значения элементов с индексами 1 и 3. Замени 'слива' на 'персик', а 'апельсин' на 'банан'.

// Тесты
// Объявлена переменная fruits.
// Значение переменной fruits это массив ['яблоко', 'персик', 'груша', 'банан'].
// Стартовый код
const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];
// Пиши код ниже этой строки
console.log(fruits)
fruits[1]='персик';
fruits[3] = 'банан';

// task 7
// Длина массива, то есть число его элементов, хранится в свойстве length. Это динамическая величина, которая изменяется автоматически при добавлении или удалении элементов.

// const planets = ['Земля', 'Марс', 'Венера'];
// console.log(planets.length); // 3
// Задание
// Объяви переменную fruitsArrayLength и присвой ей длину массива fruits используя свойство length.

// Тесты
// Объявлена переменная fruitsArrayLength.
// Значение переменной fruitsArrayLength это число 4.

// Стартовый код
const fruits = ['яблоко', 'персик', 'груша', 'банан'];
// Пиши код ниже этой строки
const fruitsArrayLength=fruits. length;

console.log(fruitsArrayLength);


// task 8
// Индекс последнего элемента
// Чаще всего, мы заранее в коде не знаем какая будет длина массива. Для того, чтобы получить значение последнего элемента применяется следующий подход - длина массива всегда на единицу больше, чем индекс последнего элемента. Используя формулу длина_массива - 1 можно получить значение последнего элемента массива произвольной длины.

// const planets = ['Земля', 'Марс', 'Венера'];
// const lastElementIndex = planets.length - 1;
// planets[lastElementIndex]; // 'Венера'
// Задание
// Объяви две перемнные:

// Имя переменной	Ожидаемое значение
// lastElementIndex	индекс последнего элемента масcива fruits через длина_массива - 1
// lastElement	значение последнего элемента массива
// Тесты
// Объявлена переменная lastElementIndex.
// Значение переменной lastElementIndex это число 3.
// Объявлена переменная lastElement.
// Значение переменной lastElementIndex это строка 'банан'.

// Стартовый код
const fruits = ['яблоко', 'персик', 'груша', 'банан'];
// Пиши код ниже этой строки

const lastElementIndex=fruits.length - 1;
const lastElement = fruits[lastElementIndex];


// task 9

// Напиши функцию getExtremeElements(array) которая принимает один параметр array - массив элементов произвольной длины. Функция должна возвращать массив из двух элементов - первого и последнего элемента параметра array.

// Тесты
// Объявлена функция getExtremeElements(array).
// Вызов getExtremeElements([1, 2, 3, 4, 5]) возвращает [1, 5].
// Вызов getExtremeElements(['Земля', 'Марс', 'Венера']) возвращает ['Земля', 'Венера'].
// Вызов getExtremeElements(['яблоко', 'персик', 'груша', 'банан']) возвращает ['яблоко', 'банан'].

function getExtremeElements(array) {
    // Пиши код ниже этой строки
    
 array=[array[0], array[array.length - 1]];

return array;
    // Пиши код выше этой строки
  }

console.log(getExtremeElements([1, 2, 3, 4, 5]));
console.log(getExtremeElements(['Земля', 'Марс', 'Венера'])); 
console.log(getExtremeElements(['яблоко', 'персик', 'груша', 'банан']));

// task 10
// Метод split(delimeter) позволяет превратить строку в массив, «разбив» его по разделителю delimeter. Если разделитель это пустая строка, то получится массив отдельных символов. Разделителем может быть один или несколько символов.

// const name = 'Манго';
// console.log(name.split('')); // ['M', 'a', 'н', 'г', 'о']

// const message = 'JavaScript это интересно';
// console.log(message.split(' ')); // ['JavaScript', 'это', 'интересно']
// Задание
// Дополни код функции splitMessage(message, delimeter) так, чтобы она возвращала в переменной words результат разделения строки message по разделителю delimeter - массив строк.

// Тесты
// Объявлена функция splitMessage(message, delimeter).
// Вызов splitMessage('Манго спешит на поезд', ' ') возвращает ['Манго', 'спешит', 'на', 'поезд'].
// Вызов splitMessage('Манго', '') возвращает ['М', 'а', 'н', 'г', 'о'].
// Вызов splitMessage('лучшее_за_неделю', '_') возвращает ['лучшее', 'за', 'неделю'].
function splitMessage(message, delimeter) {
  let words;
  // Пиши код ниже этой строки
  words=message.split(delimeter);
  
  
  
  // Пиши код выше этой строки
  return words;
}

console.log(splitMessage('Манго спешит на поезд',' '));
console.log(splitMessage('Манго',''));
console.log(splitMessage('лучшее_за_неделю', '_'));

task 11
// Задание
// Сервису гравировки украшений нужна функция, которая бы автоматически считала цену гравировки, в зависимости от количества слов и цены за слово.

// Объявлена функция calculateEngravingPrice(message, pricePerWord). Эта функция принимает строку, состоящую из слов разделённых только пробелами (параметр message) и цену гравировки одного слова (параметр pricePerWord).

// Напиши тело функции, чтобы она возвращала общую стоимость гравировки всех слов в строке.

// Тесты
// Объявлена функция calculateEngravingPrice(message, pricePerWord).
// Вызов calculateEngravingPrice('JavaScript у меня в крови', 10) возвращает 50.
// Вызов calculateEngravingPrice('JavaScript у меня в крови', 20) возвращает 100.
// Вызов calculateEngravingPrice('Веб-разработка это творческая работа', 40) возвращает 160.
// Вызов calculateEngravingPrice('Веб-разработка это творческая работа', 20) возвращает 80.
function calculateEngravingPrice(message, pricePerWord) {
  // Пиши код ниже этой строки

 let words;

 words=(message.split(' ').length)*pricePerWord;
  
 return words;
  // Пиши код выше этой строки
}

console.log(calculateEngravingPrice('JavaScript у меня в крови', 10));
console.log(calculateEngravingPrice('JavaScript у меня в крови', 20));
console.log(calculateEngravingPrice('Веб-разработка это творческая работа', 40));
console.log(calculateEngravingPrice('Веб-разработка это творческая работа', 20));

// task 12
// Метод массивов join(delimeter) позволяет соединить элементы массива в строку. В строке элементы будут разделены символом или группой символов указанных в delimeter. То есть это операция обратная методу строк split(delimeter).

// const words = ['JavaScript', 'это', 'интересно'];
// console.log(words.join('')); // 'JavaScriptэтоинтересно'
// console.log(words.join(' ')); // 'JavaScript это интересно'
// console.log(words.join('*')); // 'JavaScript*это*интересно'
// Задание
// Дополни код функции makeStringFromArray(array, delimeter) так, чтобы она возвращала в переменной string результат соединения элементов массива array c разделителем delimeter - строку.

// Тесты
// Объявлена функция makeStringFromArray(array, delimeter).
// Вызов makeStringFromArray(['Манго', 'спешит', 'на', 'поезд'], ' ') возвращает 'Манго спешит на поезд'.
// Вызов makeStringFromArray(['М', 'а', 'н', 'г', 'о'], '')) возвращает 'Манго'.
// Вызов makeStringFromArray(['лучшее', 'за', 'неделю'], '_') возвращает 'лучшее_за_неделю'.
function makeStringFromArray(array, delimeter) {
  let string;
  // Пиши код ниже этой строки
   string=array.join(delimeter);
 
 
  // Пиши код выше этой строки
  return string;
}
console.log(makeStringFromArray(['Манго', 'спешит', 'на', 'поезд'], ' '));
console.log(makeStringFromArray(['М', 'а', 'н', 'г', 'о'], ''));
console.log(makeStringFromArray(['лучшее', 'за', 'неделю'], '_'));

// task 13
// Термин slug - это человеко-понятный уникальный идентификатор, который используется в веб-разработке для создания читабельных URL-адесов.

// Например, вместо того чтобы пользователь увидел в адресной строке mysite.com/posts/1q8fh74tx, можно сделать slug из названия статьи. В результате адрес получится более приятным для восприятия: mysite.com/posts/массивы-для-новичков.

// Внимание
// Slug это всегда строка в нижнем регистре, слова которой разделены тире.

// Напиши функцию slugify(title) которая принимает заголовок статьи, параметр title, и возвращает slug, созданный из этой строки.

// Значением параметра title будут строки, слова которых разделены только пробелами.
// Все символы slug должны быть в нижнем регистре.
// Все слова slug должна быть разделены тире.
// Тесты
// Объявлена функция slugify(title).
// Вызов slugify('Массивы для новичков') возвращает 'массивы-для-новичков'.
// Вызов slugify('Английский для разработчика') возвращает 'английский-для-разработчика'.
// Вызов slugify('Десять секретов JavaScript') возвращает 'десять-секретов-javascript'.
// Вызов slugify('Как стать JUNIOR разработчиком за ДВЕ НЕДЕЛИ') возвращает 'как-стать-junior-разработчиком-за-две-недели'.
function slugify(title) {
  // Пиши код ниже этой строки
  
 const normalizeTitle=title.toLowerCase();
 const words=normalizeTitle.split(' ');
 const slug=words.join('-');
 
 return slug;
  // Пиши код выше этой строки
}

console.log(slugify('Массивы для новичков'));
console.log(slugify('Английский для разработчика'));
console.log(slugify('Десять секретов JavaScript'));
console.log(slugify('Как стать JUNIOR разработчиком за ДВЕ НЕДЕЛИ'));

// task 14
// Метод slice(begin, end) возвращает новый массив, содержащий копию части исходного массива, не изменяя его. Копия делается от begin и до, но не включая, end - индексы элементов исходного массива.

// Если begin и end не указаны, будет создана полная копия исходного массива.
// Если не указан end, копирование будет от start и до конца исходного массива.
// Если значение start отрицательное, а end не указан, то будут скопированы последние N элементов.
// const planets = ['Земля', 'Марс', 'Венера', 'Юпитер', 'Сатурн'];

// console.log(planets.slice(0, 2)); // ['Земля', 'Марс']
// console.log(planets.slice(0, 4)); // ['Земля', 'Марс', 'Венера', 'Юпитер']
// console.log(planets.slice(1, 3)); // ['Марс', 'Венера']
// console.log(planets.slice(-2)); // ['Юпитер', 'Сатурн']
// console.log(planets.slice()); // ['Земля', 'Марс', 'Венера', 'Юпитер', 'Сатурн']
// Задание
// Дополни код так, чтобы переменные содержали частичные копии исходного массива fruits.

// firstTwoEls - массив из первых двух элементов.
// nonExtremeEls - массив из всех элементов кроме первого и последнего.
// lastThreeEls - массив из трёх последних элементов.
// Тесты
// Объявлена переменная fruits
// Значение переменной fruits это массив ['яблоко', 'слива', 'груша', 'апельсин', 'банан'].
// Объявлена переменная firstTwoEls
// Значение переменной firstTwoEls это массив ['яблоко', 'слива'].
// Объявлена переменная nonExtremeEls
// Значение переменной nonExtremeEls это массив ['слива', 'груша', 'апельсин'].
// Объявлена переменная lastThreeEls.
// Значение переменной lastThreeEls это массив ['груша', 'апельсин', 'банан'].
// Переменной lastThreeEls присвоена копия части массива fruits после применения метода slice с правильными аргументами.

const fruits = ['яблоко', 'слива', 'груша', 'апельсин', 'банан'];
// Пиши код ниже этой строки
const firstTwoEls =fruits.slice(0,2) ;
const nonExtremeEls = fruits.slice(1,4);
const lastThreeEls = fruits.slice(-3);

// task 15
// Метод concat()
// Метод concat используется для объединения двух или более массивов. Он не изменяет массив на котором вызывается, а возвращает новый. Порядок аргументов метода влияет на порядок элементов нового массива.

// const firstArray = ['Меркурий', 'Венера', 'Земля'];
// const secondArray = ['Марс', 'Юпитер'];
// const thirdArray = ['Сатурн', 'Уран', 'Нептун'];
// const allPlanets = firstArray.concat(secondArray, thirdArray);

// console.log(firstArray); // ['Меркурий', 'Венера', 'Земля'];
// console.log(allPlanets); // ['Меркурий', 'Венера', 'Земля', 'Марс', 'Юпитер', 'Сатурн', 'Уран', 'Нептун'];
// Задание
// Дополни код так, чтобы в переменной allClients получился массив всех элементов массивов oldClients и newClients.

// Тесты
// Объявлена переменная oldClients.
// Значение переменной oldClients это массив ['Манго', 'Аякс', 'Поли', 'Киви'].
// Объявлена переменная newClients.
// Значение переменной newClients это массив ['Персик', 'Хьюстон'].
// Объявлена переменная allClients.
// Значение переменной allClients это массив ['Манго', 'Аякс', 'Поли', 'Киви', 'Персик', 'Хьюстон'].
// Переменной allClients присвоен массив после применения метода concat с правильными аргументами.

const oldClients = ['Манго', 'Аякс', 'Поли', 'Киви'];
const newClients = ['Персик', 'Хьюстон'];

const allClients =oldClients.concat(newClients) ; // Дополни эту строку

// task 16
// Напиши функцию makeArray(firstArray, secondArray, maxLength) для создания нового массива со всеми элементами двух исходных firstArray и secondArray. Параметр maxLength содержит максимально допустимую длину нового массива.

// Если количество элементов нового массива больше maxLength, функция должна вернуть копию массива длиной maxLength элементов.

// В противном случае функция должна вернуть новый массив целиком.

// Тесты
// Объявлена функция makeArray(firstArray, secondArray, maxLength)
// Вызов makeArray(['Манго', 'Поли'], ['Аякс', 'Челси'], 3) возвращает ['Манго', 'Поли', 'Аякс'].
// Вызов makeArray(['Манго', 'Поли', 'Хьюстон'], ['Аякс', 'Челси'], 4) возвращает ['Манго', 'Поли', 'Хьюстон', 'Аякс'].
// Вызов makeArray(['Манго'], ['Аякс', 'Челси', 'Поли', 'Хьюстон'], 3) возвращает ['Манго', 'Аякс', 'Челси'].
// Вызов makeArray(['Земля', 'Юпитер'], ['Нептун', 'Уран'], 2) возвращает ['Земля', 'Юпитер'].
// Вызов makeArray(['Земля', 'Юпитер'], ['Нептун', 'Уран'], 4) возвращает ['Земля', 'Юпитер', 'Нептун', 'Уран'].
// Вызов makeArray(['Земля', 'Юпитер'], ['Нептун', 'Уран', 'Венера'], 0) возвращает [].
// Вызов функции makeArray() со случайными массивами и случайным числом возвращает правильный массив.
function makeArray(firstArray, secondArray, maxLength) {
    // Пиши код ниже этой строки
  const arrayConCat = firstArray.concat(secondArray).slice(0, maxLength);
  return arrayConCat;
    // Пиши код выше этой строки
  }
console.log(makeArray(['Манго', 'Поли'], ['Аякс', 'Челси'], 3));
console.log(makeArray(['Манго', 'Поли', 'Хьюстон'], ['Аякс', 'Челси'], 4));
console.log(makeArray(['Манго'], ['Аякс', 'Челси', 'Поли', 'Хьюстон'], 3));
console.log(makeArray(['Земля', 'Юпитер'], ['Нептун', 'Уран'], 2));
console.log(makeArray(['Земля', 'Юпитер'], ['Нептун', 'Уран'], 4));
console.log(makeArray(['Земля', 'Юпитер'], ['Нептун', 'Уран', 'Венера'], 0));

// task 17
// Циклы используются для многократного повторения кода. Объявление цикла for состоит из трёх выражений.

// for (Инициализация; Условие; Пост - выражение) {
//   // Тело цикла
// }
// Инициализация - выполняется один раз перед началом цикла. Используется для создания переменной-счётчика и указания её начального значения.
// Условие - выражение, оцениваемое перед каждой итерацией (повторением) цикла. Тело цикла выполняется только тогда, когда выражение приводится к true. Цикл завершается, если значение будет false.
// Пост-выражение - выполняется в конце каждого повторения цикла, перед проверкой условия. Используется для обновления переменной-счётчика.
// Тело - набор инструкций для выполнения на каждом повторении. Выполняется, если выражение условия приводится к true.
// for (let i = 0; i <= 20; i += 5) {
//   console.log(i);
// }
// В примере объявляется переменная i, инициализируется значением 0 и цикл выполняется (его тело) до тех пор, пока i <= 20, то есть условие приводится к true. После каждой итерации счётчик увеличивается на 5.

// Задание
// Дополни цикл for так, чтобы он логировал все целые числа в диапазоне от start до end включительно.

// Тесты
// Объявлена переменная start.
// Значение переменной start это число 3.
// Объявлена переменная end.
// Значение переменной end это число 7.
// Объявлена переменная i - счётчик цикла.
// Начальное значение переменной i равно 3.
// Условие цикла приводится к true до тех пор, пока i меньше либо равно 7.
// На каждой итерации значение переменной i увеличивается на единицу.
// Вывод в консоль переменной i покажет числа 3, 4, 5, 6, 7.

const start = 3;
const end = 7;

for (let i = start; i <=end ; i +=1 ) { // Дополни эту строку
  console.log(i);
}

// task 18
// Напиши функцию calculateTotal(number), которая принимает целое число (параметр number) и возвращает сумму всех целых чисел от единицы и до этого числа. Например, если number равно 3, то сумма это 1 + 2 + 3, то есть 6.

// Тесты
// Объявлена функция calculateTotal(number).
// Вызов функции calculateTotal(1) возвращает 1.
// Вызов функции calculateTotal(3) возвращает 6.
// Вызов функции calculateTotal(7) возвращает 28.
// Вызов функции calculateTotal(18) возвращает 171.
// Вызов функции calculateTotal(24) возвращает 300.
// Вызов функции calculateTotal() со случайным числом возвращает правильное значение.
function calculateTotal(number) {
  // Пиши код ниже этой строки
  let total=0;
for(i=0; i<=number; i++){
  total+=i;
}

return total;
  // Пиши код выше этой строки
}
  
console.log(calculateTotal(1));
console.log(calculateTotal(3));
console.log(calculateTotal(7));
console.log(calculateTotal(18));
console.log(calculateTotal(24));

// task 19
// const planets = ['Земля', 'Марс', 'Венера'];

// for (let i = 0; i < planets.length; i += 1) {
//   console.log(planets[i]);
// }
// Для доступа к элементам используется синтаксис квадратных скобок массив[индекс], где индекс - это значение счётчика цикла от 0 и до последнего индекса массива, который на единицу меньше длины массива.

// Задание
// Дополни код цикла for так, чтобы он последовательно логировал все элементы массива fruits.

// Тесты
// Объявлена переменная fruits.
// Значение переменной fruits это массив ['яблоко', 'слива', 'груша', 'апельсин'].
// Объявлена переменная i - счётчик цикла.
// Начальное значение переменной i равно 0.
// Условие цикла приводится к true до тех пор, пока i меньше 4.
// На каждой итерации значение переменной i увеличивается на единицу.
// В теле цикла for объявляется переменная const fruit и этой переменной присваивается значение - элемент массива.
// В теле цикла for используется вывод в консоль переменной fruit.
const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];

for (let i=0; i<fruits.length; i+=1) { // Дополни эту строку
  const fruit = fruits[i]; // Дополни эту строку
  console.log(fruit);
}
// task 21
// Напиши функцию findLongestWord(string) которая принимает произвольную строку состоящую только из слов разделённых пробелом (параметр string) и возвращает самое длинное слово в этой строке.

// Тесты
// Объявлена функция findLongestWord(string).
// Вызов функции findLongestWord('The quick brown fox jumped over the lazy dog') возвращает jumped.
// Вызов функции findLongestWord('Google do a roll') возвращает Google.
// Вызов функции findLongestWord('May the force be with you') возвращает force.
// Вызов функции findLongestWord() со случайной строкой возвращает правильное значение.
function findLongestWord(string) {
  // Пиши код ниже этой строки
// зададим переменную
let longestwords= '';
// разделим слова в предложении и сделаем массив
  stringWords = string.split(' ');
  // переберем слова в массиве по 
  for (let i = 0; i < stringWords.length; i += 1) {
    words = stringWords[i];
    // поставим условие если 
    if (words.length > longestwords.length) {
    longestwords=words;
    }
  }
  return  longestwords;
}
  
  // Пиши код выше этой стро
  console.log(findLongestWord('The quick brown fox jumped over the lazy dog'));
  console.log(findLongestWord('Google do a roll'));
   console.log(findLongestWord('May the force be with you'));

// task 22
//    Метод push() позволяет добавить один или несколько элементов в конец массива, без необходимости указывать индексы добавляемых элементов.

// const planets = ['Земля', 'Марс', 'Венера'];
// planets.push('Юпитер');
// planets.push('Сатурн', 'Уран', 'Нептун');

// console.log(planets); // ['Земля', 'Марс', 'Венера', 'Юпитер', 'Сатурн', 'Уран', 'Нептун']
// Задание
// Дополни код функции createArrayOfNumbers(min, max) так, чтобы она возвращала массив всех целых чисел от значения min до max.

// Тесты
// Объявлена функция createArrayOfNumbers(min, max).
// Вызов функции createArrayOfNumbers(1, 3) возвращает [1, 2, 3].
// Вызов функции createArrayOfNumbers(14, 17) возвращает [14, 15, 16, 17].
// Вызов функции createArrayOfNumbers(29, 34) возвращает [29, 30, 31, 32, 33, 34].
// Вызов функции createArrayOfNumbers() со случайными min и max возвращает правильный массив.
// В цикле for использовался метод push.

function createArrayOfNumbers(min, max) {
  const numbers = [];
  // Пиши код ниже этой строки
for(i=min; i<=max; i+=1){
numbers.push(i);
}  // Пиши код выше этой строки
  return numbers;
}

// task23
// Напиши функцию filterArray(numbers, value), которая принимает массив чисел (параметр numbers) и возвращает новый массив, в котором будут только те элементы массива numbers, которые больше чем значение параметра value (число).

// Тесты
// Объявлена функция filterArray(numbers, value).
// Вызов функции filterArray([1, 2, 3, 4, 5], 3) возвращает [4, 5].
// Вызов функции filterArray([1, 2, 3, 4, 5], 4) возвращает [5].
// Вызов функции filterArray([1, 2, 3, 4, 5], 5) возвращает [].
// Вызов функции filterArray([12, 24, 8, 41, 76], 38) возвращает [41, 76].
// Вызов функции filterArray([12, 24, 8, 41, 76], 20) возвращает [24, 41, 76].
// Вызов функции filterArray() со случайным массивом и числом возвращает правильный массив.
// В цикле for использовался метод push.

function filterArray(numbers, value) {
  
  let biggerNumber=[];
  
for (const number of numbers){
  
  if (number>value){
    biggerNumber.push(number);
  }
}
  return  biggerNumber;
}


console.log( filterArray([1, 2, 3, 4, 5], 3));
console.log( filterArray([1, 2, 3, 4, 5], 4));
console.log( filterArray([1, 2, 3, 4, 5], 5));
console.log( filterArray([12, 24, 8, 41, 76], 38));
console.log( filterArray([12, 24, 8, 41, 76], 20));

// task 24
// Метод includes()
// Метод includes(value) проверяет есть ли в массиве элемент со значением value и возвращает true или false соответственно. Область применения этого метода сводится к ситуациям, когда необходимо проверить есть ли элемент в массиве и не важна его позиция (индекс).

// const planets = ['Земля', 'Марс', 'Венера'];

// console.log(planets.includes('Земля')); // true
// console.log(planets.includes('земля')); // false
// console.log(planets.includes('Венера')); // true
// console.log(planets.includes('Юпитер')); // false
// Задание
// Функция checkFruit(fruit) принимает строку с названием фрукта (параметр fruit), и проверяет есть ли такой фрукт в массиве fruits.

// Дополни код функции так, что если:

// фрукт есть в массиве, то функция возвращает true;
// фрукта нет в массиве, то функция возвращает false.
// Тесты
// Объявлена функция checkFruit(fruit).
// Вызов checkFruit('слива') возвращает true.
// Вызов checkFruit('мандарин') возвращает false.
// Вызов checkFruit('груша') возвращает true.
// Вызов checkFruit('Груша') возвращает false.
// Вызов checkFruit('яблоко') возвращает true.
// Вызов функции checkFruit() со случайным словом возвращает правильное значение boolean.
// В функции использовался метод includes.

function checkFruit(fruit) {
  const fruits = ['яблоко', 'слива', 'груша', 'апельсин'];

  return fruits.includes(fruit); // Дополни эту строку
}

console.log(checkFruit('слива'));
console.log(checkFruit('мандарин'));
console.log(checkFruit('груша'));
console.log(checkFruit('Груша'));
console.log(checkFruit('яблоко'));

// task 25
// Общими элементами массивов называют те элементы, которые присутствуют во всех массивах.

// Например, в двух массивах [1, 3, 5] и [0, 8, 5, 3] общими будут числа 3 и 5, т.к. они присутствуют в обоих исходных массивах. А числа 0, 1 и 8 присутствуют только в одном из массивов.

// Напиши функцию getCommonElements(array1, array2) которая получает два массива произвольной длины в параметры array1 и array2, и возвращает новый массив, состоящий из тех элементов, которые присутствуют в обоих исходных массивах.

// Тесты
// Объявлена функция getCommonElements(array1, array2).
// Вызов getCommonElements([1, 2, 3], [2, 4]) возвращает [2].
// Вызов getCommonElements([1, 2, 3], [2, 1, 17, 19]) возвращает [1, 2].
// Вызов getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]) возвращает [12, 27, 3].
// Вызов getCommonElements([10, 20, 30, 40], [4, 30, 17, 10, 40]) возвращает [10, 30, 40].
// Вызов getCommonElements([1, 2, 3], [10, 20, 30]) возвращает [].
// Вызов функции getCommonElements() со случайными двумя массивами возвращает правильный массив.
// В цикле for использовались методы includes и push.
function getCommonElements(array1, array2) {
  // Пиши код ниже этой строки

  let sameNumber=[];
  
for (let i=0; i<array1.length; i+=1){

  if (array2.includes(array1[i])){
    sameNumber.push(array1[i]);
  }
}
  return sameNumber;
}

console.log(getCommonElements([1,2,3],[2,4]));
console.log(getCommonElements([1,2,3],[2, 1, 17, 19]));
console.log(getCommonElements([2, 1, 17, 19],[12, 8, 3, 36, 27]));
console.log(getCommonElements([10, 20, 30, 40],[4, 30, 17, 10, 40]));
console.log(getCommonElements([1,2,3],[10, 20, 30]));

// task 26
// Цикл for...of
// Инструкция for...of объявляет цикл, перебирающий итерируемые объекты, такие как массивы и строки. Тело цикла будет выполняться для значения каждого элемента. Это хорошая замена циклу for, если не нужен доступ к счётчику итерации.

// for (const variable of iterable) {
//   // тело цикла
// }
// variable — переменная, которая будет хранить значение элемента на каждой итерации.
// iterable — коллекция, которая имеет перечислимые элементы, например массив.
// const planets = ['Земля', 'Марс', 'Венера'];

// for (const planet of planets) {
//   console.log(planet);
// }
// Задание
// Выполни рефакторинг кода функции calculateTotalPrice(order) заменив цикл for на for...of.

// Тесты
// Объявлена функция calculateTotalPrice(order).
// Вызов функции calculateTotalPrice([12, 85, 37, 4]) возвращает 138.
// Вызов функции calculateTotalPrice([164, 48, 291]) возвращает 503.
// Вызов функции calculateTotalPrice([412, 371, 94, 63, 176]) возвращает 1116.
// Вызов функции calculateTotalPrice([]) возвращает 0.
// Вызов функции calculateTotalPrice() со случайным массивом чисел возвращает правильную сумму.

function calculateTotalPrice(order) {
  let total = 0;
  // Пиши код ниже этой строки
for(const number of order){
  total += number;
} 
  //for (let i = 0; i < order.length; i += 1) {
    //total += order[i];
  //}

  // Пиши код выше этой строки
  return total;
}

// task 27
// Выполни рефакторинг функции filterArray(numbers, value) заменив цикл for на for...of.

// Тесты
// Объявлена функция filterArray(numbers, value).
// Вызов функции filterArray([1, 2, 3, 4, 5], 3) возвращает [4, 5].
// Вызов функции filterArray([1, 2, 3, 4, 5], 4) возвращает [5].
// Вызов функции filterArray([1, 2, 3, 4, 5], 5) возвращает [].
// Вызов функции filterArray([12, 24, 8, 41, 76], 38) возвращает [41, 76].
// Вызов функции filterArray([12, 24, 8, 41, 76], 20) возвращает [24, 41, 76].
// Вызов функции filterArray() со случайным массивом и числом возвращает правильный массив.
// Функция calculateTotalPrice() использует цикл for..of.

function filterArray(numbers, value) {
  // Пиши код ниже этой строки
  const filteredNumbers = []; 
  for(const filter of numbers){
if (filter> value){
  filteredNumbers.push(filter)
  // второй способ
  //for (let i = 0; i < numbers.length; i += 1) {
    //const number = numbers[i];

    //if (number > value) {
      //filteredNumbers.push(number);
    }
  }

  return filteredNumbers;
  // Пиши код выше этой строки
}

// task 28
// Вместо того, чтобы возвращать результат деления, операция по модулю (%) возвращает целочисленный остаток от деления двух чисел - делимого и делителя.

// 5 % 1 = 0
// // 5, разделенное на 1, равно 5, а остаток - 0

// 5 % 2 = 1
// //  5, разделенное на 2, равно 2, а остаток - 1

// 5 % 3 = 2
// //  5, разделенное на 3, равно 1, а остаток - 2

// 5 % 4 = 1
// //  5, разделенное на 4, равно 1, а остаток - 1

// 5 % 5 = 0
// //  5, разделенное на 5, равно 1, а остаток - 0
// Задание
// Дополни выражения остатка от деления так, чтобы код проходил тесты.

// Тесты
// Объявлена переменная a.
// Значение переменной a это число 0.
// Объявлена переменная b.
// Значение переменной b это число 1.
// Объявлена переменная c.
// Значение переменной c это число 3.
// Объявлена переменная d.
// Значение переменной d это число 5.
// Объявлена переменная e.
// Значение переменной e это число 2.

const a = 3 % 3;
const b = 4 % 3;
const c = 11 % 4;
const d = 12 % 7;
const e = 8 % 6;

// task 29

// Напиши функцию getEvenNumbers(start, end) которая возвращает массив всех чётных чисел от start до end. Чётным считается число которое делится на 2 без остатка.

// Тесты
// Объявлена функция getEvenNumbers(start, end).
// Вызов функции getEvenNumbers(2, 5) возвращает [2, 4].
// Вызов функции getEvenNumbers(3, 11) возвращает [4, 6, 8, 10].
// Вызов функции getEvenNumbers(6, 12) возвращает [6, 8, 10, 12].
// Вызов функции getEvenNumbers(8, 8) возвращает [8].
// Вызов функции getEvenNumbers(7, 7) возвращает [].
// Вызов функции getEvenNumbers() со случайными start и end возвращает правильный массив.

function getEvenNumbers(start, end) {
    // Пиши код ниже этой строки
let evenNumbers = [];
  for (let i = start; i <= end; i += 1){
    if (i % 2 === 0) {
      evenNumbers.push(i);
}
}
  
    return evenNumbers;
    // Пиши код выше этой строки
}
  
// task 31
// Если цикл находится в теле функции, то оператор break не прекращает выполнение функции, а только прервёт цикл. Для того чтобы прерывать выполнение сразу цикла и функции есть оператор return.

// В примере ищем число 3. Как только выполнится условие if, делаем возврат, который прервёт выполнение цикла и функции.

// function fn() {
//   for (let i = 0; i <= 5; i += 1) {
//     console.log(i);

//     if (i === 3) {
//       console.log('Нашли число 3, делаем возврат, прерывая цикл и функцию');
//       return i;
//     }
//   }

//   // Этот console.log не выполнится
//   console.log('Лог после цикла в теле функции');
// }

// const result = fn();
// console.log('Лог после выхода из функции');
// console.lof(`Результат выполнения функции ${result}`);
// Задание
// Выполни рефакторинг функции findNumber(start, end, divisor) так, чтобы она:

// возвращала первое число от start до end, которое делится на divisor без остатка;
// не использовала оператор break;
// не использовала переменную number.
// Тесты
// Объявлена функция findNumber(start, end, divisor).
// Вызов findNumber(2, 6, 5) возвращает 5.
// Вызов findNumber(8, 17, 3) возвращает 9.
// Вызов findNumber(6, 9, 4) возвращает 8.
// Вызов findNumber(16, 35, 7) возвращает 21.
// Вызов findNumber() со случайным набором чисел возвращает верный результат.
// В цикле for не должен использоваться break для выхода до завершения всех итераций цикла.

Если цикл находится в теле функции, то оператор break не прекращает выполнение функции, а только прервёт цикл. Для того чтобы прерывать выполнение сразу цикла и функции есть оператор return.

В примере ищем число 3. Как только выполнится условие if, делаем возврат, который прервёт выполнение цикла и функции.

function fn() {
  for (let i = 0; i <= 5; i += 1) {
    console.log(i);

    if (i === 3) {
      console.log('Нашли число 3, делаем возврат, прерывая цикл и функцию');
      return i;
    }
  }

  // Этот console.log не выполнится
  console.log('Лог после цикла в теле функции');
}

const result = fn();
console.log('Лог после выхода из функции');
console.lof(`Результат выполнения функции ${result}`);
Задание
Выполни рефакторинг функции findNumber(start, end, divisor) так, чтобы она:

возвращала первое число от start до end, которое делится на divisor без остатка;
не использовала оператор break;
не использовала переменную number.
Тесты
Объявлена функция findNumber(start, end, divisor).
Вызов findNumber(2, 6, 5) возвращает 5.
Вызов findNumber(8, 17, 3) возвращает 9.
Вызов findNumber(6, 9, 4) возвращает 8.
Вызов findNumber(16, 35, 7) возвращает 21.
Вызов findNumber() со случайным набором чисел возвращает верный результат.
В цикле for не должен использоваться break для выхода до завершения всех итераций цикла.

//   task 32
// Функция includes()
// Задание
// Напиши функцию includes(array, value), которая делает тоже самое, что и метод массива массив.includes(значение) - проверяет, есть ли в массиве array значение value, возвращая true если есть и false в противном случае.

// При выполнении этой задачи в теле функции includes() нельзя использовать метод массив.includes(значение).

// Тесты
// Объявлена функция includes(array, value).
// Вызов includes([1, 2, 3, 4, 5], 3) возвращает true.
// Вызов includes([1, 2, 3, 4, 5], 17) возвращает false.
// Вызов includes(['Земля', 'Марс', 'Венера', 'Юпитер', 'Сатурн'], 'Юпитер') возвращает true.
// Вызов includes(['Земля', 'Марс', 'Венера', 'Юпитер', 'Сатурн'], 'Уран') возвращает false.
// Вызов includes(['яблоко', 'слива', 'груша', 'апельсин'], 'слива') возвращает true.
// Вызов includes(['яблоко', 'слива', 'груша', 'апельсин'], 'киви') возвращает false.
// Вызов includes() для случайного массива со случайным value возвращает верный boolean.
// В функции includes используется for, return, но не метод массива includes.

function includes(array, value) {
  // Пиши код ниже этой строки
for(const arrayIncludes of array){
if (arrayIncludes===value){
    return true;
    }
}

  return false;
  // Пиши код выше этой строки
}